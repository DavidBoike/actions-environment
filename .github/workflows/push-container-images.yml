name: Push container images
on:
  workflow_dispatch:
    inputs:
      version:
        description: Full version of container image to push
        required: true
        type: string
jobs:
  push:
    runs-on: ubuntu-latest
    name: Push
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Validate versions
        id: validate
        run: |
          $version = "${{ inputs.version }}"
          $isMatch = $version -match '^(?<Major>\d+)\.(?<Minor>\d+)\.(?<Patch>\d+)(-(?<PrereleaseLabel>[\w\-\.]+))?$'
          if ( -not $isMatch)
          {
            throw "Invalid version ${{ inputs.version }}"
            exit 1
          }

          Write-Output "Version ${{ inputs.version }} is valid."

          $major = $Matches.Major
          $minor = $Matches.Minor
          $patch = $Matches.path
          $prereleaseLabel = $Matches.PrereleaseLabel
          $isPrerelease = -not -not $prereleaseLabel
          Write-Output "Major = $major, Minor = $minor, Patch = $patch, PrereleaseLabel = $prereleaseLabel, IsPrerelease = $isPrerelease"

          # Get highest-versioned release
          $releases = Invoke-WebRequest -Uri https://api.github.com/repos/particular/ServiceControl/releases -UseBasicParsing |
              ConvertFrom-Json -ErrorAction Stop
          $releasedVersions = $releases | ? Draft -eq $false | ? Prerelease -eq $false | Select-Object -ExpandProperty tag_name
          $latestVersion = $releasedVersions | Sort-Object { [System.Version]$_ } -Descending | Select -First 1
          Write-Output "Latest released version on GitHub = $latestVersion"

          $isLatest = $false
          if ( -not $isPrerelease ) {
            $vNew = [System.Version]$version
            $vPrev = [System.Version]$latestVersion

            if ($vNew -ge $vPrev) {
              $isLatest = $true
            }
          }
          Write-Output "Is new version $version the new latest version? $isLatest"

          Write-Output "Determining tags..."
          $tags = @($version)

          if ( -not $isPrerelease ) {
            $tags += "$major"
            $tags += "$major.$minor"
            if ($isLatest) {
              $tags += 'latest'
            }
          }

          Write-Output "Tags to apply:"
          $tags | ForEach-Object { Write-Output " * '$_'" }
          
